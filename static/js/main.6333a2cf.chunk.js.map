{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","useEffect","setItem","stringify","editItem","setEditItem","Provider","value","addTask","title","id","uuid","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","console","log","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","type","placeholder","onChange","e","target","preventDefault","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6333a2cf.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nexport const TaskListContext = createContext();\r\n\r\nconst TaskListContextProvider = (props) => {\r\n  const initialState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n\r\n  const [tasks, setTasks] = useState(initialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const [editItem, setEditItem] = useState(null);\r\n\r\n  // Add tasks\r\n  const addTask = (title) => {\r\n    setTasks([...tasks, { title, id: uuid() }]);\r\n  };\r\n\r\n  // Remove tasks\r\n  const removeTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  // Clear tasks\r\n  const clearList = () => {\r\n    setTasks([]);\r\n  };\r\n  // Find task\r\n  const findItem = (id) => {\r\n    const item = tasks.find((task) => task.id === id);\r\n\r\n    setEditItem(item);\r\n  };\r\n\r\n  // Edit task\r\n  const editTask = (title, id) => {\r\n    const newTasks = tasks.map((task) =>\r\n      task.id === id ? { title, id } : task\r\n    );\r\n\r\n    console.log(newTasks);\r\n\r\n    setTasks(newTasks);\r\n    setEditItem(null);\r\n  };\r\n  return (\r\n    <TaskListContext.Provider\r\n      value={{\r\n        tasks,\r\n        addTask,\r\n        removeTask,\r\n        clearList,\r\n        findItem,\r\n        editTask,\r\n        editItem,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TaskListContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TaskListContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\nexport default function Task({ task }) {\r\n  const { removeTask, findItem  } = useContext(TaskListContext);\r\n  const handleRemove = () => {\r\n    removeTask(task.id);\r\n  };\r\n  const handleEdit = () => {\r\n    findItem(task.id)\r\n  }\r\n  return (\r\n    <li className=\"list-item\">\r\n    <span>{task.title} </span>\r\n    <div>\r\n      <button\r\n        className=\"btn-delete task-btn\"\r\n        onClick={() => removeTask(task.id)}\r\n      >\r\n        <i className=\"fas fa-trash-alt\"></i>\r\n      </button>{' '}\r\n      <button className=\"btn-edit task-btn\" onClick={handleEdit}>\r\n        <i className=\"fas fa-pen\"></i>\r\n      </button>\r\n    </div>\r\n  </li>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\nimport Task from \"./Task\";\r\n\r\nexport default function TaskList() {\r\n  const { tasks } = useContext(TaskListContext);\r\n  return (\r\n    <div>\r\n    {tasks.length ? (\r\n      <ul className=\"list\">\r\n        {tasks.map(task => {\r\n          return <Task task={task} key={task.id} />;\r\n        })}\r\n      </ul>\r\n    ) : (\r\n      <div className=\"no-tasks\">No Tasks</div>\r\n    )}\r\n  </div>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\nexport default function TaskForm() {\r\n  const { addTask, clearList, editItem, editTask } = useContext(\r\n    TaskListContext\r\n  );\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!editItem) {\r\n      addTask(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      editTask(title, editItem.id);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const handleClearList = (e) => {\r\n    e.preventDefault();\r\n    clearList();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editItem !== null) {\r\n      setTitle(editItem.title);\r\n    } else {\r\n      setTitle(\"\");\r\n    }\r\n  }, [editItem]);\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"task-input\"\r\n          placeholder=\"Add Task..\"\r\n          value={title}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"buttons\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn add-task-btn\"\r\n            onClick={handleSubmit}\r\n          >\r\n            {editItem ? \"Edit Task\" : \"Add Task\"}\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn clear-btn\"\r\n            onClick={handleClearList}\r\n          >\r\n            Clear Task\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <h1>To Do List</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskList from \"./components/TaskList\";\nimport TaskListContextProvider from \"./context/TaskListContext\";\nimport TaskForm from \"./components/TaskForm\";\nimport Header from './components/Header'\nfunction App() {\n  return (\n    <TaskListContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <div className=\"main\">\n            <Header/>\n            <TaskForm/>\n            <TaskList />\n          </div>\n        </div>\n      </div>\n    </TaskListContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}